name: Telegram Bot
on:
  pull_request:
    # Only rebuild when the bot or the workflow definitions have changed
    paths:
      - "telegram/**"
      - ".github/workflows/**"
  push:
    # Only rebuild when the bot or the workflow definitions have changed
    paths:
      - "telegram/**"
      - ".github/workflows/**"

jobs:
  test:
    name: Test for Go version ${{ matrix.golang }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Go ${{ matrix.golang }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.golang }}
      - name: Get dependencies
        run: go get -v -t -d ./...
        working-directory: ./telegram
      - name: Test
        run: go test ./...
        working-directory: ./telegram
    strategy:
      matrix:
        golang: ["1.17"]

  docker:
    name: Build the docker container
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build
        working-directory: ./telegram
        run: DOCKER_BUILDKIT=1 docker build . --file Dockerfile --tag nnc-telegram
      - name: Log into registry
        # Nobody else is allowed to use the GITHUB_TOKEN, therefore don't login
        if: github.actor == 'riesinger'
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Push image
        # Nobody else is allowed to use the GITHUB_TOKEN, therefore skip pushing
        if: github.actor == 'riesinger'
        run: |
          IMAGE_ID=ghcr.io/riesinger/nnc-telegram
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version, use latest instead of main
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,' | sed -e 's/^main$/latest/')
          VERSIONS=$VERSION
          # If a tag was published, build all the versions (1, 1.2, 1.2.3)
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSIONS="$(echo $VERSION | sed -e 's/^v//') $(echo $VERSION | sed -E 's/^v//;s/[.].*//g') $(echo $VERSION | sed -E 's/^v//;s/^(\d+[.]\d+)[.].*/\1/') latest"
          for version in $VERSIONS; do
            echo IMAGE_ID=$IMAGE_ID
            echo version=$version
            docker tag nnc-telegram $IMAGE_ID:$version
            docker push $IMAGE_ID:$version
          done

# TODO: Add a deployment step
